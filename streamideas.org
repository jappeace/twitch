* Toy problems
https://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/nbody.html

* make raster.click awesome!
  + Fix undo
  + make timwriting feasable
  + alternative inplan layout
* Help myself opensource stream
  -- where I help myself by fixing opensource things
** Fix servant-client

** Add Char to datakind in GHC
** Cachix don't duplicate binary cache
   Currently cachix will put everything that is in the store into my repo,
   seriously limitiing the amount we can store in there.
   
   This issue is about trying to solve that: https://github.com/cachix/cachix/issues/16
   
   I think the CLI argument is an easy solution to this, eg:
    `cachix push mycache --exclude-present-in https://cache.nixos.org`


* FONT STREAM!!!

* Idris compiles to JS
  I want to make a web app in idris2.

  How viable is this choice?

* Emacs
**  Fix emacs stream
   hahaha JK, emacs can't be fixed, just broken more differently
** Emacs as PID 1

* The great nix stream
  write about nix things?
* ADTs presentation prep stream

* Rust stream
** Make game run
** Implement functor, applicative, monad, traversable, foldable, profunctor
   Maybe with help of parser combinator course for first three?
   Profunctor for let's lens?

* Language review
  Look at obscure langauges and built something non-trivial?
  


** Clojure
   
*** DONE Implemented a rock paper siccors bot
https://github.com/jappeace/rock-paper-siccors

*** TODO I wan't to make a game w/ clojurescript
    Lumie had the suggestion of using conduit for example: https://jacekschae.github.io/conduit-re-frame-10x-demo/


** Idris
*** DONE   N body?
   
*** TODO dependenly typed tensor comprehensions
Tensor Comprehensions in SaC, Sven-Bodo Scholz

** Shen lisp
   Make linear types of course

** Smalltalk
https://pharo.org/ 

** Hackett
   Countoren sugessted using hackett.
   A strongly typed lisp trying to create typefull macros

https://github.com/lexi-lambda/hackett

https://lexi-lambda.github.io/hackett/
** Coq
   Proof to the world I can proof
   Proof the existence of pi
   Eat pi
   
   jap-pi

** Mecury
** ATS
http://www.ats-lang.org/

** APL 
   Array based langague.

   It has the annoying symbols.

https://en.wikipedia.org/wiki/APL_(programming_language)

https://github.com/lokedhs/gnu-apl-mode

Consider using oneko for additional frustrations

** Prolog
** Erlang
   Raytracer, because we need massive scalability

** Elixer


** Common lisp
Copy servant

** Julia 
   Lumie:

Julia is a really cool language, its heavily inspired by how common lisp works btw.
but also improves on it a bit, e.g. it doesn't separate between generic and non-generic functions. it just makes everything into generic functions
generic function is roughly equal to multimethod here

* Halogen & purescript

** For nix bois:
https://github.com/justinwoo/easy-purescript-nix 

** Examples
https://github.com/thomashoneyman/purescript-halogen-realworld 

** Hoogle
https://pursuit.purescript.org 


** PSCID
https://github.com/kRITZCREEK/pscid 
* Racket
  If I want to become a lisp boi


* Hacking editors
- Do secret CSS idea with ffmpeg
- Checkout intelij for haskell, probably works for cut-the-crap

  
- There is this: https://css.christmas/2019/21

  
** Make scanlines for emacs?
   How hard would this even be?

